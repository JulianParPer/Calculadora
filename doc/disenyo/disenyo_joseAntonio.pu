@startuml primerNivel
left to right direction
[Aplicación]
[Calculadora]
[IOUtilidades]
[Historico]

<<<<<<<< HEAD:doc/disenyo/disenyo_ivanvm.pu
[Aplicación] ..> [IOUtilidades]: use
[Aplicación] ..> [Calculadora]: use
[Aplicación] ..> [Historico]: use
========
[Historial]

[Aplicación] ..> [IOUtilidades]:use
[Aplicación] ..> [Calculadora]:use
[Aplicación] ..> [Historial]:use
>>>>>>>> 47536a55719bfa8f1116059b212f332cd1a876f1:doc/disenyo/disenyo_joseAntonio.pu

note right of [Aplicación]
    Aplicación que pide los operandos 
    y operador al usuario y muestra los
    resultados
end note

note right of [Calculadora]
    Este modulo contiene la lógica de
    cálculo: sumas, restas, 
    multiplicaciones y divisiones
end note

note right of [IOUtilidades]
    Contiene herramientas que facilitan
    la recogida de números por teclado
    y su impresión en pantalla
end note

note right of [Historico]
    Permite consultar el historial de
    operaciones realizadas.
end note
@enduml

@startuml segundoNivelCalculadora
package es.dam.prog.calculadora {
<<<<<<<< HEAD:doc/disenyo/disenyo_ivanvm.pu
    interface Operacion {
        +calcular(operandos: RealOperandos): double
        +calcular(operandos: EnteroOperandos): int
    }
========

    abstract class Operando

    class EnteroOperandos{
        -operando1:int
        -operando2:int

    }
    class RealOperandos{
        -operando1:double
        -operando2:double
>>>>>>>> 47536a55719bfa8f1116059b212f332cd1a876f1:doc/disenyo/disenyo_joseAntonio.pu

    abstract class Operando {}

    class EnteroOperandos {
        -operador1: int
        -operador2: int
    }

    class RealOperandos {
        -operador1: double
        -operador2: double
    }

    class Suma {}
    class Division {}
    class CalculadoraException {}

    Operando <|-- EnteroOperandos
    Operando <|-- RealOperandos
<<<<<<<< HEAD:doc/disenyo/disenyo_ivanvm.pu
    Operacion <|.. Suma
    Operacion <|.. Division
    Operacion ..> CalculadoraException: throws

    note right of Operacion
========

    interface Operable{
        +double calcular(operandos: RealOperandos)
        +int calcular(operandos: EnteroOperandos)
    }

    class Suma{

    }

    class Resta{

    }

    class Multiplicacion{

    }

    class Division{

    }

    Operable <|.. Suma
    Operable <|.. Resta
    Operable <|.. Multiplicacion
    Operable <|.. Division

    class CalculadoraException {

    }

    Operable ..> CalculadoraException: throws


    note right of Operable
>>>>>>>> 47536a55719bfa8f1116059b212f332cd1a876f1:doc/disenyo/disenyo_joseAntonio.pu
        Todas las opciones de cálculo
        son recogidas en esta interfaz:
        suma, resta, división... Si quiero
        añadir más, solo tendría que agregar
        nuevas clases que implementen esta
        interfaz.
    end note

    note right of Operando
        Encapsula a los operandos, el el futuro
        cambiaremos esta clase para que sea más
        potente y flexible.
    end note

}

note bottom of es.dam.prog.calculadora 
    Este paquete contiene todos los artefactos
    de programación del módulo/componente
    calculadora            
end note

package es.dam.prog.historial {

    class Historial {

        -add(Operacion)
        -add(Operando, char)
        -remove()
        -list(): String[]

    }
    
    class Operacion {
        +operando1
        +operando2
        +operador

    }

    Historial *-- Operacion


}

class ArrayList{

}

Historial ..> ArrayList:use


@enduml

@startuml segundoNivelIOUtilidades
package es.dam.prog.util.io {
    class TecladoUtil {
        +{static}leerEntero(): int
        +{static}leerEntero(minimo: int, maximo: int): int
        +{static}leerReal(): double
        +{static}leerReal(minimo: int, maximo: int): double
        +{static}leerCaracter(): char
    }

    class IOUtilException {}

    TecladoUtil ..> IOUtilException: throws

    note right of TecladoUtil
        Encapsula todas las operaciones
        relativas a las lecturas de datos
        por teclado
    end note
}
@enduml

@startuml
package es.dam.prog.historial {
    class Operation {
        -oper1: int
        -oper2: int 
        -operando: String
    }

    class Historico {
        +add()
        +remove()
    }

    Historico ..> ArrayList: use
    Operation --* Historico
}
@enduml

@startuml segundoNivelAplicacion
package es.dam.prog.app {
    class App {
        +{static}main(args: String[])
    }
}
@enduml